package com.jimple.generator;

import com.jimple.generator.converter.Md2HtmlConverter;
import com.jimple.model.MarkdownFile;
import com.jimple.model.MarkdownProperties;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.time.LocalDate;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

public class SimpleMarkdownGeneratorTest {

    private Md2HtmlConverter mockConverter;
    private SimpleMarkdownGenerator generator;

    @BeforeEach
    public void setup() {
        mockConverter = Mockito.mock(Md2HtmlConverter.class);
        generator = new SimpleMarkdownGenerator(mockConverter);
    }

    @Test
    public void generateToHtml_shouldReturnEmptyString_whenFileIsNull() {
        String result = generator.generateToHtml(null);
        assertEquals("", result);
    }

    @Test
    public void generateToHtml_shouldReturnEmptyString_whenFileIsNotPublished() {
        MarkdownFile mockFile = Mockito.mock(MarkdownFile.class);
        when(mockFile.isPublish()).thenReturn(false);

        String result = generator.generateToHtml(mockFile);
        assertEquals("", result);
    }

    @Test
    public void generateToHtml_shouldCombineHeaderAndBody_whenFileIsValid() {
        MarkdownProperties mockProperties = Mockito.mock(MarkdownProperties.class);
        MarkdownFile mockFile = Mockito.mock(MarkdownFile.class);

        when(mockFile.isPublish()).thenReturn(true);
        when(mockFile.properties()).thenReturn(mockProperties);
        when(mockFile.contents()).thenReturn("Test content");
        when(mockConverter.convertHeaderToHtml(mockProperties)).thenReturn("<header>Header</header>");
        when(mockConverter.convertBodyToHtml("Test content")).thenReturn("<p>Test content</p>");

        String result = generator.generateToHtml(mockFile);

        assertTrue(result.contains("<html") && result.contains("</html>"));
        assertTrue(result.contains("<header") && result.contains("</header>"));
        assertTrue(result.contains("<body") && result.contains("</body>"));
        assertTrue(result.contains("<footer") && result.contains("</footer>"));
    }

    @Test
    void testGenerateToHtml_returnsCompleteHtml() {
        // 준비
        Md2HtmlConverter mockConverter = Mockito.mock(Md2HtmlConverter.class);
        MarkdownFile mockFile = createMockMarkdownFile();

        when(mockConverter.convertHeaderToHtml(mockFile.properties())).thenReturn("<header>Header content</header>");
        when(mockConverter.convertBodyToHtml(mockFile.contents())).thenReturn("<p>Body content</p>");

        SimpleMarkdownGenerator generator = new SimpleMarkdownGenerator(mockConverter);

        // 실행
        String result = generator.generateToHtml(mockFile);

        // 검증
        assertTrue(result.contains("<!DOCTYPE html>"));
        assertTrue(result.contains("<title>Test Title</title>"));
        assertTrue(result.contains("<header>Header content</header>"));
        assertTrue(result.contains("<p>Body content</p>"));
        assertTrue(result.contains("<footer>"));
        assertTrue(result.contains("Generated by Jimple"));
    }

    private MarkdownFile createMockMarkdownFile() {
        MarkdownProperties props = new MarkdownProperties(true, "Test Title", LocalDate.now());
        return new MarkdownFile(props, "Markdown content", "test.md");
    }
}