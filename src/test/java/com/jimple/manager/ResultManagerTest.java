package com.jimple.manager;

import com.jimple.collector.MarkdownCollector;
import com.jimple.generator.MarkdownGenerator;
import com.jimple.model.md.MarkdownFile;
import com.jimple.model.md.MarkdownProperties;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class ResultManagerTest {
    private MarkdownCollector mockCollector;
    private MarkdownGenerator mockGenerator;
    private Path resultDir;
    private Path sourceDir;
    private ResultManager resultManager;

    @BeforeEach
    void setUp() throws IOException {
        mockCollector = mock(MarkdownCollector.class);
        mockGenerator = mock(MarkdownGenerator.class);
        resultDir = Files.createTempDirectory("resultDir");
        sourceDir = Files.createTempDirectory("sourceDir");
        resultManager = new ResultManager(mockCollector, mockGenerator, resultDir);
    }

    @Test
    void testProcessAndSaveResults_createsHtmlFilesForPublishedMarkdowns() throws IOException {
        MarkdownFile mockFile = createMockMarkdownFile("Test Title", "test-content.md");
        when(mockCollector.collectPublishedMarkdowns(sourceDir)).thenReturn(List.of(mockFile));
        
        // 이제 mockGenerator에서 완전한 HTML을 반환하도록 설정
        String completeHtml = """
            <!DOCTYPE html>
            <html lang="ko">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Test Title</title>
                <link rel="stylesheet" href="/assets/jimple.css" >
            </head>
            <body>
                <article>
                    <p>HTML content</p>
                </article>
                <footer>
                    <p>Generated by Jimple</p>
                </footer>
            </body>
            </html>
            """;
        when(mockGenerator.generateToHtml(mockFile)).thenReturn(completeHtml);

        resultManager.processAndSaveResults(sourceDir);

        String expectedHtmlFileName = "Test-Title.html";
        Path expectedFile = resultDir.resolve(expectedHtmlFileName);
        assertTrue(Files.exists(expectedFile), "HTML file should have been created");

        String fileContent = Files.readString(expectedFile);
        // 이제 ResultManager가 아닌 Generator가 HTML 구조를 생성하므로, 
        // 저장된 내용이 Generator에서 반환한 완전한 HTML과 동일한지 확인
        assertEquals(completeHtml, fileContent);
    }

    @Test
    void testProcessAndSaveResults_handlesNoPublishedMarkdowns() {
        when(mockCollector.collectPublishedMarkdowns(sourceDir)).thenReturn(List.of());

        resultManager.processAndSaveResults(sourceDir);

        assertEquals(0, Objects.requireNonNull(resultDir.toFile().listFiles()).length, "No HTML file should be created when there are no markdown files");
    }

    @Test
    void testProcessAndSaveResults_skipsEmptyHtmlContent() {
        MarkdownFile mockFile = createMockMarkdownFile("Empty Content", "empty-content.md");
        when(mockCollector.collectPublishedMarkdowns(sourceDir)).thenReturn(List.of(mockFile));
        when(mockGenerator.generateToHtml(mockFile)).thenReturn("");

        resultManager.processAndSaveResults(sourceDir);

        assertEquals(0, Objects.requireNonNull(resultDir.toFile().listFiles()).length, "No HTML file should be created for empty HTML content");
    }

    private MarkdownFile createMockMarkdownFile(String title, String fileName) {
        MarkdownProperties props = new MarkdownProperties(false, title, LocalDate.now());
        Path filePath = sourceDir.resolve(fileName);
        return new MarkdownFile(props, "", filePath.toString());
    }
}